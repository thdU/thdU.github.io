{"version":3,"sources":["Timeline.js","App.js","reportWebVitals.js","index.js"],"names":["Timeline","props","carsCopy","JSON","parse","stringify","cars","sort","a","b","startDate","options","chart","animations","enabled","toolbar","show","tools","download","title","text","align","style","fontSize","plotOptions","bar","horizontal","distributed","dataLabels","hideOverflowingLabels","xaxis","type","max","chartEndtime","car","endDate","Date","getTime","getChartEndtime","labels","yaxis","maxWidth","grid","row","colors","opacity","tooltip","series","data","map","x","year","make","model","desc","y","fillColor","id","width","App","useState","setCars","handleChange","event","field","index","nextCars","target","value","handleDateChange","className","Form","Control","placeholder","onChange","inline","Group","controlId","Label","selected","date","dateFormat","showMonthYearPicker","Button","onClick","splice","handleDeleteInput","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e897e2f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from \"react-apexcharts\";\r\nimport differenceInMonths from 'date-fns/differenceInMonths'\r\nimport differenceInYears from 'date-fns/differenceInYears'\r\nimport './Timeline.scss';\r\n\r\nconst Timeline = (props) => {\r\n\r\n  const carsCopy = JSON.parse(JSON.stringify(props.cars));\r\n  carsCopy.sort((a, b) => (a.startDate - b.startDate));\r\n\r\n  const getChartEndtime = () => {\r\n    let chartEndtime;\r\n\r\n    for (const car of carsCopy) {\r\n      if (!chartEndtime || car.endDate > chartEndtime) {\r\n        chartEndtime = car.endDate;\r\n      }\r\n    }\r\n\r\n    if (!chartEndtime) {\r\n      chartEndtime = new Date().getTime();\r\n    }\r\n\r\n    return chartEndtime;\r\n  }\r\n\r\n  const options = {\r\n    chart: {\r\n      animations: {\r\n        enabled: false,\r\n      },\r\n      toolbar: {\r\n        show: true,\r\n        tools: {\r\n          download: '<img src=\"./download_icon.png\" class=\"ico-download\" width=\"30\">',\r\n        },\r\n      }\r\n    },\r\n    title: {\r\n      text: 'My Car History',\r\n      align: 'center',\r\n      style: {\r\n        fontSize: '18px',\r\n      }\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        horizontal: true,\r\n        distributed: true,\r\n        dataLabels: {\r\n          hideOverflowingLabels: false\r\n        }\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n      // formatter: function (val, opts) {\r\n      //   // var label = opts.w.globals.labels[opts.dataPointIndex]\r\n      //   if (val.length === 2 && val[1] > val[0]) {\r\n      //     const years = differenceInYears(val[1], val[0]);\r\n      //     const months = differenceInMonths(val[1], val[0]);\r\n\r\n      //     if (years === 0) {\r\n      //       return `${months} m`;\r\n      //     } else if (months % 12 === 0) {\r\n      //       return `${years} yr`;\r\n      //     }\r\n\r\n      //     return `${years} yr, ${months - 12 * years} m`;\r\n      //   }\r\n\r\n      //   return '';\r\n      // },\r\n    },\r\n    xaxis: {\r\n      type: 'datetime',\r\n      max: getChartEndtime(),\r\n      labels: {\r\n        style: {\r\n          fontSize: '14px',\r\n        }\r\n      }\r\n    },\r\n    yaxis: {\r\n      show: true,\r\n      labels: {\r\n        align: 'center',\r\n        maxWidth: '200px',\r\n        style: {\r\n          fontSize: '16px',\r\n        },\r\n      },\r\n    },\r\n    grid: {\r\n      row: {\r\n        colors: ['#f3f4f5', '#fff'],\r\n        opacity: 1\r\n      }\r\n    },\r\n    tooltip: {\r\n      enabled: false,\r\n    }\r\n  };\r\n\r\n  const data = carsCopy.map(car => {\r\n    return {\r\n      x: [`${car.year} ${car.make} ${car.model}`, `${car.desc}`],\r\n      y: [\r\n        car.startDate,\r\n        car.endDate\r\n      ],\r\n      fillColor: '#008FFB'\r\n    }\r\n  });\r\n\r\n  const series = [\r\n    {\r\n      data\r\n    }\r\n  ];\r\n\r\n\r\n  return (\r\n    <div id=\"chart\">\r\n      <Chart\r\n        options={options}\r\n        series={series}\r\n        type=\"rangeBar\"\r\n        width={900}\r\n      />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Timeline;","import Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport React, { useState } from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Timeline from './Timeline';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction App() {\n  const [cars, setCars] = useState([{\n    year: '',\n    make: '',\n    model: '',\n    desc: '',\n    startDate: (new Date()).getTime(),\n    endDate: (new Date()).getTime(),\n  }]);\n\n  const handleAddInput = () => {\n    const nextCars = JSON.parse(JSON.stringify(cars));\n    nextCars.push({\n      year: '',\n      make: '',\n      model: '',\n      desc: '',\n      startDate: (new Date()).getTime(),\n      endDate: (new Date()).getTime(),\n    });\n    setCars(nextCars);\n  }\n\n  const handleDeleteInput = (index) => {\n    const nextCars = JSON.parse(JSON.stringify(cars));\n    nextCars.splice(index, 1);\n    setCars(nextCars);\n  }\n\n  const handleChange = (event, field, index) => {\n    const nextCars = JSON.parse(JSON.stringify(cars));\n    nextCars[index][field] = event.target.value;\n    setCars(nextCars);\n  }\n\n  const handleDateChange = (value, field, index) => {\n    const nextCars = JSON.parse(JSON.stringify(cars));\n    nextCars[index][field] = value.getTime();\n    setCars(nextCars);\n  }\n\n  const renderInputRows = () => {\n    return cars.map((car, index) => {\n      return (\n        <div className='inputRow' key={`inputRow_${index}`}>\n          <div className='carModelRow'>\n            <Form.Control className='marginRight yearInput' placeholder=\"Year\" value={car.year} onChange={(event) => handleChange(event, 'year', index)} />\n            <Form.Control className='marginRight makeInput' placeholder=\"Make\" value={car.make} onChange={(event) => handleChange(event, 'make', index)} />\n            <Form.Control placeholder=\"Model\" value={car.model} onChange={(event) => handleChange(event, 'model', index)} />\n          </div>\n          <Form inline={true} className='descInputRow'>\n            <Form.Group controlId=\"formDesc\" >\n              <Form.Label className='otherInfoLabel'>Other info:</Form.Label>\n              <Form.Control className='descInput' placeholder=\"color/transmission/fun fact/etc\" value={car.desc} onChange={(event) => handleChange(event, 'desc', index)} />\n            </Form.Group>\n          </Form>\n          <div className='datepickerRow'>\n            <div>Buy Date: </div>\n            <DatePicker\n              className='dateSelect marginRight'\n              selected={cars[index].startDate}\n              onChange={date => handleDateChange(date, 'startDate', index)}\n              dateFormat=\"MM/yyyy\"\n              showMonthYearPicker\n            />\n            <div>Sell Date: </div>\n            <DatePicker\n              className='dateSelect'\n              selected={cars[index].endDate}\n              onChange={date => handleDateChange(date, 'endDate', index)}\n              dateFormat=\"MM/yyyy\"\n              showMonthYearPicker\n            />\n            <Button className='deleteButton' onClick={() => handleDeleteInput(index)}>Remove</Button>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  return (\n    <div className=\"appWrapper\">\n      <div className='header'>\n        <div className='title'>Car Ownership Timeline</div>\n      </div>\n      <div className='timelineWrapper'>\n        <div className='inputSection'>\n          {renderInputRows()}\n          <Button className='addButton' onClick={handleAddInput}>Add</Button>\n        </div>\n        <Timeline cars={cars} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}